@using OSBIDE.Library
@using OSBIDE.Library.Models
@using OSBIDE.Web.Models.ViewModels
@using OSBIDE.Library.Events
@using OSBIDE.Web.Models
@using System.Collections.Generic
@model FeedViewModel
<section>
    @Html.ActionLink("Load earlier posts...", "Index", new { timestamp = Model.LastPollDate.AddHours(-10).Ticks, errorType = Model.SelectedErrorType.Id }, new { id = "load-old-posts" })
</section>
<div id="hidden-workspace">
</div>
<div id="hidden-updates-workspace" style="display: none;"></div>
<script type="text/javascript">

    var AllComments = {};

    $(document).ready(function () {

        //get recent feed items
        getRecentFeedItems();

        //display hidden
        showLastHidden();

        //get comment updates
        getCommentUpdates();

        //listen for clicks to load older messages
        $("#load-old-posts").click(function (e) {
            e.preventDefault();
            $("#load-old-posts").text("Loading...");
            var feedId = getOldestFeedId();
            $.ajax(
            {
                url: "@Url.Action("OldFeedItems", "Feed")",
                data: { id: feedId, count: 10, userId: "@Model.SingleUserId", errorType: "@Model.SelectedErrorType.Id" },
                dataType: "html",
                type: "GET",
                success: getOldPostsSuccess,
            }
            );
        });

        //disable footer selection
        $('.feed-item-footer').disableSelection();
    }
    );

    //called when the user clicks on the "Load Earlier Posts..." link at the bottom of the page
    function getOldPostsSuccess(html) {
        $("#load-old-posts").text("Load earlier posts...");
        var trimmed = $.trim(html);
        if (trimmed.length > 0) {
            $("#feed-items").append(html);
            parseDates();
            $(".feed-item-ajax:hidden.OldFeedItems").each(function (e) {
                $(this).removeClass("feed-item-ajax");
            });
        }
        else {
            $("#load-old-posts").text("No earlier posts available.");
        }
    }

    //Updates KnockoutJS models for feed item conversations
    function expandComments(element) {

        //change text as appropriate
        var commentsTextSpan = "#expand-comments-text-" + element;
        if ($(commentsTextSpan).text() == "View") {
            $(commentsTextSpan).text("Hide");
        }
        else {
            $(commentsTextSpan).text("View");
        }

        //if the user clicked hide, hide the comments now
        //display comments
        var commentsDiv = "#feed-item-comments-" + element;
        if ($(commentsDiv).find('.log-comment-single').length > 0) {
            if ($(commentsDiv).css('display') != 'none') {
                $(commentsDiv).css('display', 'none');
            }
            else {

                //ask server for comments
                $.ajax(
                    {
                        url: "@Url.Action("GetComments", "Feed")",
                        data: { logId: element },
                        dataType: "json",
                        type: "GET",
                        success: expandCommentsSuccess
                    }
            );
            }
        }
    }

    //Called after successful AJAX call to get feed item comments
    function expandCommentsSuccess(result) {

        //update view model
        updateFeedItemViewModel(result);

        //display comments
        var commentsDiv = "#feed-item-comments-" + result.OriginalLogId;
        $(commentsDiv).css('display', 'block');
    }

    //Updates a KO view model using the supplied JS object
    function updateFeedItemViewModel(jsObject) {

        //AC: copy object into result because that's what the code was originally expecting.
        var result = jsObject;

        //bind to new view model
        var model = {
            Comments: result.Comments,
            NumberOfComments: ko.observable(result.Comments.length),
            LastUpdated: ko.observable(new Date())
        };

        //compute local time
        $(model.Comments).each(function (index) {

            var milliseconds = model.Comments[index].UtcUnixDate + "";
            var formatString = "MM/DD/YYYY hh:mm A";
            var currentDate = moment.utc(milliseconds, 'X');
            var localDate = new Date();
            var localOffset = localDate.getTimezoneOffset();
            currentDate = currentDate.subtract('minutes', localOffset);
            model.Comments[index]['LocalDate'] = currentDate.format(formatString);
        });

        var toBind = "feed-item-" + result.OriginalLogId;

        //view model doesn't exist, create one
        if (!AllComments[result.ActualLogId]) {
            AllComments[result.ActualLogId] = ko.observable({});
        }

        //update view model with server data
        AllComments[result.ActualLogId](ko.mapping.fromJS(model));

        //apply binding if one doesn't already exist
        if (!ko.dataFor(document.getElementById(toBind))) {
            ko.applyBindings(AllComments[result.ActualLogId], document.getElementById(toBind));
        }
    }

    //Periodically updates view models for feed items.  Useful for displaying an updated count
    //of comments for a given feed item.
    function getCommentUpdates() {

        var hasCalledUpdate = false;

        //request comment updates for all feed items
        $(".feed-item-single").each(function (index) {

            if (hasCalledUpdate == false) {
                var log_id = $(this).attr("data-id");
                var needsUpdate = false;

                //do we have a KO binding?
                var koModel = ko.dataFor(this);
                if (koModel) {

                    //When was the binding last updated?
                    var now = new Date().getTime();
                    var then = koModel.LastUpdated().getTime();

                    //has more than 50 seconds gone by?  If so, request update
                    if (now - then > 50000) {
                        needsUpdate = true;
                    }

                }
                else {

                    //we don't have a binding for this feed item.  Send away.
                    needsUpdate = true;
                }

                //send AJAX request if we need an update
                if (needsUpdate == true) {

                    //after one update, return and call ourselves again.  This prevents multiple update
                    //requests to the same underlying model
                    hasCalledUpdate = true;

                    //make the ajax call
                    $.ajax(
                        {
                            url: "@Url.Action("GetComments", "Feed")",
                            data: { logId: log_id },
                            dataType: "json",
                            type: "GET",
                            success: updateFeedItemViewModel
                        });
                }
            }
        });

        //call ourselves again in 5 seconds
        setTimeout(getCommentUpdates, 5000)
    }

    function showLastHidden() {
        var initialScrollHeight = $(document).scrollTop();
        var item = $(".feed-item-ajax:hidden").last();

        //if we're loading old items,
        if (item.hasClass("OldFeedItems")) {
            item = $(".feed-item-ajax:hidden.OldFeedItems").first();
        }
        item.slideDown(
                {
                    duration: 600,
                    easing: "linear",
                    progress: function (animation, progress, remainingMs) {
                        if (initialScrollHeight > 50) {
                            $(document).scrollTop($(this).height() + initialScrollHeight);
                        }
                    }
                });
        setTimeout(showLastHidden, 4000);
    }

    function getOldestFeedId() {
        var lastId = $(".feed-item-single").last().attr("data-id");
        if (lastId == undefined) {
            lastId = "@(Model.LastLogId + 1)";
        }
        return lastId;
    }

    function getMostRecentFeedId() {
        var lastId = $(".feed-item-single").first().attr("data-id");
        if (lastId == undefined) {
            lastId = "@Model.LastLogId";
        }
        return lastId;
    }

    function getRecentFeedItems() {

        //find most recent log id
        var lastId = getMostRecentFeedId();
        $.ajax(
            {
                url: "@Url.Action("RecentFeedItems", "Feed")",
                data: { id: lastId, userId: "@Model.SingleUserId", errorType: "@Model.SelectedErrorType.Id" },
                dataType: "html",
                type: "GET",
                success: getRecentFeedItemsSuccess,
                complete: function () { setTimeout(getRecentFeedItems, 40000); }
            }
            );
    }

    function getRecentFeedItemsSuccess(html) {
        var trimmed = $.trim(html);
        if (trimmed.length > 0) {
            $("#hidden-workspace").append(html);
            parseDates();
            if ($("#hidden-workspace").find('.feed-item-single').length > 0) {
                $("#feed-items").prepend(html);
            }
            $("#hidden-workspace").empty();
        }
    }


</script>
